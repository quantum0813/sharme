// generated by Fast Light User Interface Designer (fluid) version 1.0110

#include "sharme_ui.h"
#include "enums.h"

SharmeUI::SharmeUI() {
  { sharme_window = new Fl_Double_Window(445, 250, "sharme");
    sharme_window->user_data((void*)(this));
    { lb_header = new Fl_Box(7, 8, 428, 29, "sharme session 0.0");
      lb_header->box(FL_THIN_UP_FRAME);
      lb_header->labeltype(FL_SHADOW_LABEL);
      lb_header->labelfont(1);
      lb_header->labelsize(20);
    } // Fl_Box* lb_header
    { Fl_Group* o = new Fl_Group(7, 41, 422, 25, "status");
      o->labeltype(FL_NO_LABEL);
      { status_led = new Fl_Box(8, 45, 14, 14);
        status_led->box(FL_FLAT_BOX);
        status_led->color((Fl_Color)1);
      } // Fl_Box* status_led
      { status_label = new Fl_Box(27, 41, 402, 24, "disconnected");
        status_label->labeltype(FL_ENGRAVED_LABEL);
        status_label->labelsize(12);
        status_label->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
      } // Fl_Box* status_label
      o->end();
    } // Fl_Group* o
    { gr_mode = new Fl_Group(7, 84, 210, 76, "mode:");
      gr_mode->box(FL_THIN_DOWN_BOX);
      gr_mode->labeltype(FL_ENGRAVED_LABEL);
      gr_mode->align(FL_ALIGN_TOP_LEFT);
      { rb_manage = new Fl_Round_Button(15, 95, 200, 25, "&manage remote screen");
        rb_manage->type(102);
        rb_manage->down_box(FL_THIN_DOWN_BOX);
        rb_manage->value(1);
        rb_manage->labeltype(FL_ENGRAVED_LABEL);
      } // Fl_Round_Button* rb_manage
      { rb_share = new Fl_Round_Button(15, 120, 200, 25, "s&hare my screen");
        rb_share->type(102);
        rb_share->down_box(FL_THIN_DOWN_BOX);
        rb_share->labeltype(FL_ENGRAVED_LABEL);
      } // Fl_Round_Button* rb_share
      gr_mode->end();
    } // Fl_Group* gr_mode
    { gr_props = new Fl_Group(225, 63, 213, 100);
      { te_server = new Fl_Input(225, 84, 210, 26, "connect to:");
        te_server->box(FL_THIN_DOWN_BOX);
        te_server->labeltype(FL_ENGRAVED_LABEL);
        te_server->align(FL_ALIGN_TOP_LEFT);
      } // Fl_Input* te_server
      { sl_quality = new Fl_Value_Slider(225, 138, 210, 22, "quality:");
        sl_quality->type(1);
        sl_quality->box(FL_THIN_DOWN_BOX);
        sl_quality->labeltype(FL_ENGRAVED_LABEL);
        sl_quality->minimum(1);
        sl_quality->maximum(100);
        sl_quality->step(1);
        sl_quality->value(40);
        sl_quality->textfont(1);
        sl_quality->align(FL_ALIGN_TOP_LEFT);
      } // Fl_Value_Slider* sl_quality
      gr_props->end();
    } // Fl_Group* gr_props
    { te_keycode = new Fl_Input(225, 184, 210, 26, "Key code:");
      te_keycode->box(FL_THIN_DOWN_BOX);
      te_keycode->labeltype(FL_ENGRAVED_LABEL);
      te_keycode->align(FL_ALIGN_TOP_LEFT);
    } // Fl_Input* te_keycode
    { Fl_Group* o = new Fl_Group(225, 216, 210, 28, "buttons");
      o->labeltype(FL_NO_LABEL);
      { bt_exit = new Fl_Button(225, 217, 100, 24, "e&xit");
        bt_exit->box(FL_THIN_UP_BOX);
        bt_exit->down_box(FL_THIN_DOWN_BOX);
        bt_exit->labeltype(FL_ENGRAVED_LABEL);
      } // Fl_Button* bt_exit
      { bt_start = new Fl_Return_Button(335, 217, 100, 24, "&start");
        bt_start->box(FL_THIN_UP_BOX);
        bt_start->down_box(FL_THIN_DOWN_BOX);
        bt_start->labeltype(FL_ENGRAVED_LABEL);
      } // Fl_Return_Button* bt_start
      o->end();
    } // Fl_Group* o
    sharme_window->end();
  } // Fl_Double_Window* sharme_window
}

void SharmeUI::show(int argc, char **argv) {
  this->state = SHARME_STOPPED;
sharme_window->show(argc, argv);
}

void SharmeUI::disconnected() {
  this->status_led->color(FL_RED);
this->status_led->redraw();
this->status_label->label("disconnected");
this->gr_mode->activate();
if (this->rb_manage->value())
{
    this->gr_props->deactivate();
}
else
{
    this->gr_props->activate();
    this->te_server->activate();
}
this->bt_start->activate();
this->bt_exit->label("e&xit");
this->bt_exit->activate();
this->te_keycode->activate();
this->state = SHARME_STOPPED;
}

void SharmeUI::connected() {
  this->status_led->color(FL_GREEN);
this->status_led->redraw();
this->status_label->label("connected");
this->gr_mode->deactivate();
//this->gr_props->deactivate();
this->gr_props->activate();
this->te_server->deactivate();
this->bt_start->deactivate();
this->bt_exit->activate();
this->bt_exit->label("&stop");
this->te_keycode->deactivate();
this->state = SHARME_STARTED;
}

void SharmeUI::ready() {
  this->status_led->color(FL_YELLOW);
this->status_led->redraw();
this->status_label->label("ready");
this->gr_mode->deactivate();
this->gr_props->deactivate();
this->bt_start->deactivate();
this->te_keycode->deactivate();
this->bt_exit->label("&stop");
this->state = SHARME_STARTED;
}

void SharmeUI::connecting() {
  this->status_led->color(FL_YELLOW);
this->status_led->redraw();
this->status_label->label("connecting");
this->gr_mode->deactivate();
this->gr_props->deactivate();
this->bt_start->deactivate();
this->bt_exit->label("&stop");
this->bt_exit->deactivate();
this->te_keycode->deactivate();
this->state = SHARME_STARTED;
}
